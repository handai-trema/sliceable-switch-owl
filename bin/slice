#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(__dir__, '..', 'lib')

require 'rubygems'
require 'bundler'
Bundler.setup :default

require 'gli'
require 'path_in_slice_manager'
require 'trema'

# slice command
# rubocop:disable ModuleLength
module SliceApp
  extend GLI::App

  def self.slice(socket_dir)
    Trema.trema_process('RoutingSwitch', socket_dir).controller.slice
  end

  def self.update_slice(socket_dir)
    Trema.trema_process('RoutingSwitch', socket_dir).controller.update_slice
  end

  desc 'Creates a new virtual slice'
  arg_name 'name'
  command :add do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'slice name is required.' if args.empty?
      slice(options[:socket_dir]).create(args.first)
      update_slice(options[:socket_dir])
    end
  end

  desc 'Deletes a virtual slice'
  arg_name 'name'
  command :delete do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'slice name is required.' if args.empty?
      slice(options[:socket_dir]).destroy(args.first)
      update_slice(options[:socket_dir])
    end
  end

  desc 'Lists slices'
  command :list do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      DRb.start_service
      slice(options[:socket_dir]).all.each do |slice|
        puts slice
        slice.each do |port, mac_addresses|
          puts "  #{port.name}"
          mac_addresses.each do |each|
            puts "    #{each}"
          end
        end
      end
    end
  end

  desc 'Adds a port to a slice'
  command :add_port do |c|
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      slice(options[:socket_dir]).
        find_by!(name: options[:slice]).
        add_port(dpid: port.fetch(:dpid), port_no: port.fetch(:port_no))
      update_slice(options[:socket_dir])
    end
  end

  desc 'Deletes a port from a slice'
  command :delete_port do |c|
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      slice(options[:socket_dir]).
        find_by!(name: options[:slice]).
        delete_port(dpid: port.fetch(:dpid), port_no: port.fetch(:port_no))
      update_slice(options[:socket_dir])
    end
  end

  desc 'Adds a host to a slice'
  command :add_host do |c|
    c.desc 'MAC address'
    c.flag [:m, :mac]
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice name'
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--mac option is mandatory.' unless options[:mac]
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      slice(options[:socket_dir]).
        find_by!(name: options[:slice]).
        add_mac_address(options[:mac],
                        dpid: port.fetch(:dpid), port_no: port.fetch(:port_no))
      update_slice(options[:socket_dir])
    end
  end

  desc 'Deletes a host from a slice'
  command :delete_host do |c|
    c.desc 'MAC address'
    c.flag [:m, :mac]
    c.desc 'Switch port'
    c.flag [:p, :port]
    c.desc 'Slice '
    c.flag [:s, :slice]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, _args|
      fail '--mac option is mandatory.' unless options[:mac]
      fail '--port option is mandatory.' unless options[:port]
      fail '--slice option is mandatory.' unless options[:slice]
      port = Port.parse(options[:port])
      slice(options[:socket_dir]).
        find_by!(name: options[:slice]).
        delete_mac_address(options[:mac],
                           dpid: port.fetch(:dpid),
                           port_no: port.fetch(:port_no))
      update_slice(options[:socket_dir])
    end
  end

  desc 'Merge a slice with a slice'
  arg_name 'orig_slice'
  command :merge do |c|
    c.desc 'Merge slice'
    c.flag [:w, :with]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'argument is required.' if args.empty?
      fail '--with option is mandatory.' unless options[:with]
      slice(options[:socket_dir]).merge_slices(args[0], options[:with])
      update_slice(options[:socket_dir])
    end
  end 

  desc 'Split a slice into slices'
  arg_name 'orig_slice'
  command :split do |c|
    c.desc 'Split into this slice1'
    c.flag [:i, :into]
    c.desc 'Split into this slice2'
    c.flag [:a, :and]
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      fail 'argument is required.' if args.empty?
      fail '--into option is mandatory.' unless options[:into]
      fail '--and option is mandatory.' unless options[:and]
      slice(options[:socket_dir]).split_slice(args[0], options[:into], options[:and])
      update_slice(options[:socket_dir])
    end
  end


  exit run(ARGV)
end
# rubocop:enable ModuleLength
